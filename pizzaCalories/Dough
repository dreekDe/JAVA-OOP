package pizzaCalories;

import java.util.Map;

public class Dough {

    private static final Map<String, Double> FLOUR_TYPES_WITH_MODIFIERS =
            Map.of("White", 1.5,
                    "Wholegrain", 1.0);

    private static final Map<String, Double> BACKING_TECHNIQUES_WITH_MODIFIERS =
            Map.of("Crispy", 0.9,
                    "Chewy", 1.1,
                    "Homemade", 1.0);


    private String flourType;
    private String bakingTechnique;
    private double weight;

    public Dough(String flourType, String bakingTechnique, double weight) {
        this.setFlourType(flourType);
        this.setBakingTechnique(bakingTechnique);
        this.setWeight(weight);
    }

    private void setWeight(double weight) {
        validationDoughWeight(weight);
        this.weight = weight;
    }

    private void setFlourType(String flourType) {
        validationFlourType(flourType);
        this.flourType = flourType;
    }

    private void setBakingTechnique(String technique) {
        validationBakingTechnique(technique);
        this.bakingTechnique = technique;
    }

    public double calculateCalories() {
        return this.weight * 2 *
                FLOUR_TYPES_WITH_MODIFIERS.get(flourType)*
                BACKING_TECHNIQUES_WITH_MODIFIERS.get(bakingTechnique);

    }

    private static void validationFlourType(String type) {
        if (!Dough.FLOUR_TYPES_WITH_MODIFIERS.containsKey(type)) {
            throw new IllegalArgumentException("Invalid type of dough.");
        }
    }

    private static void validationBakingTechnique(String technique) {
        if (!Dough.BACKING_TECHNIQUES_WITH_MODIFIERS.containsKey(technique)) {
            throw new IllegalArgumentException("Invalid type of dough.");
        }
    }

    private static void validationDoughWeight(double weight) {
        if (weight < 1 || weight > 200) {
            throw new IllegalArgumentException("Dough weight should be in the range [1..200].");
        }
    }
}
